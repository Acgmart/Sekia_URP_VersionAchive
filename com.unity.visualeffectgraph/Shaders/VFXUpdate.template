#pragma kernel CSMain
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch glcore gles3
${VFXPragmaRequire}

${VFXGlobalInclude}
${VFXGlobalDeclaration}
${VFXInclude("Shaders/VFXParticleCommon.template")}

#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadListOut;
RWStructuredBuffer<uint> deadListCount;
#endif

#if VFX_HAS_INDIRECT_DRAW
RWStructuredBuffer<uint> indirectBuffer;
#endif

#if HAS_STRIPS
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#if VFX_USE_STRIPALIVE_CURRENT
StructuredBuffer<uint> attachedStripDataBuffer;
#endif

CBUFFER_START(updateParamsConst)
    uint dispatchWidth;
    ${VFXInstancingConstants}
    float3 cameraXRSettings;
CBUFFER_END

${VFXPerPassInclude}

${VFXGeneratedBlockFunction}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);

	uint index = GetThreadId(groupId, 0, dispatchWidth);
	${VFXInitInstancingCompute}
	index += groupThreadId.x;

	ContextData contextData = instancingContextData[instanceActiveIndex];
	uint systemSeed = contextData.systemSeed;
	uint nbMax = contextData.maxParticleCount;

#if VFX_COMPUTE_BOUNDS
	uint tid = groupThreadId.x;
#endif

	if (index < nbMax)
	{
        ${VFXLoadGraphValues}

        VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

#if VFX_USE_ALIVE_CURRENT
		${VFXLoadAttributes:{alive|stripAlive}}
		if (attributes.alive)
		{
			${VFXLoadAttributes:{(?!(alive|stripAlive))(\b\w)}}

#if HAS_STRIPS
            const StripData stripData = GetStripDataFromParticleIndex(index, PARTICLE_PER_STRIP_COUNT);
            InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
			${VFXLoadParameter:{deltaTime}}
			if (deltaTime != 0.0f)
#endif
			{
				${VFXProcessBlocks}
			}

			if (attributes.alive)
			{
				${VFXStoreAttributes:{(?!(alive))(\b\w)}}
#if VFX_HAS_INDIRECT_DRAW
                uint indirectIndex = indirectBuffer.IncrementCounter();
				indirectBuffer[indirectIndex] = index;
#endif

#if HAS_STRIPS
				uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
				InterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE, stripData.stripIndex), relativeIndexInStrip);
				InterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE, stripData.stripIndex), relativeIndexInStrip);
#endif
			}
			else
			{
				${VFXStoreAttributes:{alive|eventCount}}
#if USE_DEAD_LIST && !VFX_USE_STRIPALIVE_CURRENT
	            uint deadIndex;
		        InterlockedAdd(deadListCount[instanceIndex], 1, deadIndex);
				deadIndex += instanceIndex * RAW_CAPACITY;
				deadListOut[deadIndex] = index;
#endif
			}
		}
#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT
        else if (attributes.stripAlive)
        {
            if (STRIP_DATA_X(attachedStripDataBuffer, STRIP_MIN_ALIVE, index) == ~1) // Attached strip is no longer alive, recycle the particle
            {
	            uint deadIndex;
		        InterlockedAdd(deadListCount[instanceIndex], 1, deadIndex);
				deadIndex += instanceIndex * RAW_CAPACITY;
				deadListOut[deadIndex] = index;
                attributes.stripAlive = false;
                ${VFXStoreAttributes:{stripAlive}}
            }
        }
#endif
#else
		${VFXLoadAttributes}
#if HAS_STRIPS
        const StripData stripData = GetStripDataFromParticleIndex(index, PARTICLE_PER_STRIP_COUNT);
        InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
		${VFXLoadParameter:{deltaTime}}
		if (deltaTime != 0.0f)
#endif
		{
			${VFXProcessBlocks}
		}
		${VFXStoreAttributes}
#if VFX_HAS_INDIRECT_DRAW
        uint indirectIndex = indirectBuffer.IncrementCounter();
		indirectBuffer[indirectIndex] = index;
#endif
#endif
#if VFX_COMPUTE_BOUNDS
		${VFXLoadSize}
#if VFX_WORLD_SPACE
        ${VFXLoadParameter:{worldToLocal}}
#else
        float4x4 worldToLocal = (float4x4)0;
#endif
		InitReduction(attributes, size3, tid, worldToLocal);
#endif

	}
	#if VFX_COMPUTE_BOUNDS
	PerformBoundsReduction(index, tid, nbMax);
	#endif
}
