#pragma kernel CSMain
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch glcore gles3
${VFXPragmaRequire}

${VFXGlobalInclude}
${VFXGlobalDeclaration}
${VFXInclude("Shaders/VFXParticleCommon.template")}

CBUFFER_START(sortParamsConst)
    uint dispatchWidth;
    ${VFXInstancingConstants}
CBUFFER_END

ByteAddressBuffer attributeBuffer;
StructuredBuffer<uint> inputBuffer;

#if USE_DEAD_LIST_COUNT
ByteAddressBuffer deadListCount;
#endif

struct Kvp
{
	float sortKey;
	uint index;
};

RWStructuredBuffer<Kvp> outputBuffer;

${VFXPerPassInclude}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);
	uint index = id;
    ${VFXInitInstancingCompute}

	ContextData contextData = instancingContextData[instanceActiveIndex];
	uint threshold = contextData.maxParticleCount;
#if USE_DEAD_LIST_COUNT
	threshold -= deadListCount.Load(0);
#endif
	if (id < threshold)
	{
		uint index = inputBuffer[id];

		VFXAttributes attributes = (VFXAttributes)0;
        ${VFXLoadAttributes}

        ${VFXFeedSortingKeys}

		outputBuffer[id] = output;
	}
}
